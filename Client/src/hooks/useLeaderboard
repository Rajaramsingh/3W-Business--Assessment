import { useEffect, useState } from 'react';
import {api} from '../services/api';

export const useLeaderboard = () => {
    const [users, setUsers] = useState([]);
    const [ history, setHistory] = useState([]);
    const [loading, setLoading] = useState(false);
    const [ message ,setMessage] = useState('')

    // fetch users and history on components mount

    useEffect(() => {
        fetchUsers();
        fetchHistory();

    }, []);

    const fetchUsers = async () => {
        try{
            setLoading(true);
            const data = await api.getUsers();
            setUsers(data);
        }
        catch (error) {
             console.error('Error fetching users:', error);
      setMessage('Failed to fetch users');
        }
        finally {
            setLoading(false);
        }
    };

    const fetchHistory = async () => {
        try {
            const data = await api.getHistory();
            setHistory(data);
        }
       catch (error) {
      console.error('Error fetching history:', error);
      
       }
    };

    const claimPoints = async (userId) => {
        try {
             setLoading(true);
      const data = await api.claimPoints(userId);
      setUsers(data.users);
      setMessage(`${data.userName} claimed ${data.claimedPoints} points!`);
      fetchHistory();
      setTimeout(() => setMessage(''), 3000);
        }
        catch (error) {
      console.error('Error claiming points:', error);
      setMessage('Failed to claim points');
    } finally {
      setLoading(false);
    }
    }

     const addUser = async (Name) => {
    try {
      setLoading(true);
      const data = await api.addUser(Name);
      setUsers(data.Users);
      setMessage('User added successfully!');
      setTimeout(() => setMessage(''), 3000);
      return data.user.id; // Return new user ID
    } catch (error) {
      console.error('Error adding user:', error);
      setMessage('Failed to add user');
    } finally {
      setLoading(false);
    }
}
 return {
    users,
    history,
    loading,
    message,
    claimPoints,
    addUser,
    setMessage
  };
}

